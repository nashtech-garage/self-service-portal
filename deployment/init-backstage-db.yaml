apiVersion: batch/v1
kind: Job
metadata:
  name: backstage-migration-job
  annotations:
    "helm.sh/hook": pre-install
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      labels:
        app: backstage
    spec:
      restartPolicy: Never
      volumes:
        - name: shared-data
          emptyDir: {}
      initContainers:
        - name: db-init
          image: postgres:15
          env:
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_HOST
              value: "postgres"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DB
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
          envFrom:
            - configMapRef:
                name: backstage-config
            - secretRef:
                name: backstage-secrets
          command: ["sh", "-c"]
          args:
            - |
              echo "üîç Waiting for PostgreSQL to become available..."
              for i in $(seq 1 30); do
                if pg_isready -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${POSTGRES_USER}"; then
                  echo "‚úÖ PostgreSQL is ready!"
                  break
                fi
                echo "‚è≥ Attempt $i: PostgreSQL not ready yet. Retrying in 2s..."
                sleep 2
              done

              if ! pg_isready -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${POSTGRES_USER}"; then
                echo "‚ùå PostgreSQL did not become ready in time. Exiting."
                exit 1
              fi

              echo "üë§ Creating Backstage database user '${DB_USER}'..."
              psql -U "${POSTGRES_USER}" -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" "${POSTGRES_DB}" \
                -c "DO \$\$ BEGIN
                      CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}' CREATEDB;
                    EXCEPTION WHEN duplicate_object THEN
                      RAISE NOTICE 'User already exists.';
                    END \$\$;" || true

              echo "üéì Checking if database '${DB_DATABASE}' exists..."
              DB_EXISTS=$(psql -U "${POSTGRES_USER}" -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" "${POSTGRES_DB}" \
                -tAc "SELECT 1 FROM pg_database WHERE datname='${DB_DATABASE}'")

              if [ "$DB_EXISTS" != "1" ]; then
                echo "üéì Creating database '${DB_DATABASE}'..."
                createdb -U "${POSTGRES_USER}" -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" "${DB_DATABASE}"
              else
                echo "üéì Database '${DB_DATABASE}' already exists."
              fi

              echo "üéì Granting access to '${DB_DATABASE}'..."
              psql -U "${POSTGRES_USER}" -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" "${POSTGRES_DB}" \
                -c "GRANT ALL PRIVILEGES ON DATABASE ${DB_DATABASE} TO ${DB_USER};" || true
          volumeMounts:
            - name: shared-data
              mountPath: /shared
      imagePullSecrets:
        - name: acr-creds

      containers:
        - name: backstage
          image: selfserviceportal.azurecr.io/backstage-app:latest
          env:
            - name: K8S_URL
              value: "https://$(KUBERNETES_SERVICE_HOST)"
            - name: K8S_TOKEN
              valueFrom:
                secretKeyRef:
                  name: backstage-sa-token
                  key: token
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_HOST
              value: "postgres"
            - name: POSTGRES_PORT
              value: "5432"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
          envFrom:
            - configMapRef:
                name: backstage-config
            - secretRef:
                name: backstage-secrets
          imagePullPolicy: Always
          command: ["sh", "-c"]
          args:
            - |
              echo "‚è≥ Waiting 1 second for database setup..."
              sleep 1
              echo "üöÄ Starting Backstage..."
          volumeMounts:
            - name: shared-data
              mountPath: /shared

        - name: unlock-fallback
          image: postgres:15
          env:
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_HOST
              value: "postgres"
            - name: POSTGRES_PORT
              value: "5432"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
          envFrom:
            - configMapRef:
                name: backstage-config
            - secretRef:
                name: backstage-secrets
          command: ["sh", "-c"]
          args:
            - |
              echo "‚è≥ Waiting for unlock signal..."
              for i in $(seq 1 10); do
                if [ -f /shared/unlock_failed ]; then
                  echo "üîÅ Fallback unlocking migration table..."
                  psql -U "${POSTGRES_USER}" -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" "${DB_DATABASE}" \
                    -c "UPDATE knex_migrations_lock SET is_locked = 0 WHERE index = 1;" || true
                  break
                fi
                sleep 1
              done
          volumeMounts:
            - name: shared-data
              mountPath: /shared
