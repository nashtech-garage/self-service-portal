apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: aks-cluster
  title: New AKS Cluster
  description: An  template for the scaffolder that provision a AKS cluster using Crossplane and ArgoCD
  tags: 
    - infrastructure
spec:
  owner: user:le.caothihoang
  type: infrastructure

  parameters:  
    - title: Choose a Repo location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location for ArgoCD to Deploy
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
              - dev.azure.com
    - title: Basic AKS Cluster Configuration
      required:
        - clusterName
        - region
        - resourceGroupName
        - kubernetesVersion
        - dnsPrefix
      properties:
        clusterName:
          title: AKS Cluster Name
          type: string
          description: The name of the AKS cluster to create
          ui:autofocus: true
        region:
          title: Region
          type: string
          description: The region where the AKS cluster will be deployed
          enum:
            - eastus
            - eastus2
            - centralus
            - northeurope
            - westeurope
            - europe-west2
            - eastasia
            - southeastasia
        resourceGroupName:
          type: string
          title: Resource Group Name
          description: Name of the Azure Resource Group to be used or created
        kubernetesVersion:
          title: Kubernetes version
          type: string
          description: Kubernetes version of the Cluster
          default: "1.29.7"
          enum:
            - "1.29.7"
            - "1.29.6"
            - "1.29.5"
            - "1.29.4"
            - "1.29.3"
        dnsPrefix:
          type: string
          title: DNS Prefix
          description: The DNS prefix for the AKS cluster
  steps:
    - id: fetch-base-aks-skeleton
      name: Fetch AKS Cluster skeleton
      action: fetch:template
      input:
        url: 'https://github.com/nashtech-garage/crossplane-aks-skeleton'
        targetPath: .
        values:
          clusterName: ${{ parameters.clusterName }}
          region: ${{ parameters.region }}
          resourceGroupName: ${{ parameters.resourceGroupName }}
          kubernetesVersion: ${{ parameters.kubernetesVersion}}
          dnsPrefix: ${{ parameters.dnsPrefix }}        
          owner: ${{ parameters.repoUrl | parseRepoUrl | pick('owner')}} 
          repo: ${{ parameters.repoUrl | parseRepoUrl | pick('repo')}} 
    # This step publishes to Azure DevOps
    - id: publish
      name: Publish to Github
      if: ${{ parameters.repoUrl | parseRepoUrl | pick('host') === "github.com" }}
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.clusterName }}
        repoUrl: ${{ parameters.repoUrl }}
        # This step publishes to Azure DevOps
    - id: publish
      name: Publish to Azure DevOps
      if: ${{ parameters.repoUrl | parseRepoUrl | pick('host') === "dev.azure.com" }}
      action: publish:azure
      input:
        allowedHosts: ['dev.azure.com']
        description: This is ${{ parameters.clusterName }}
        repoUrl: ${{ parameters.repoUrl }}
        organization: ${{ parameters.repoUrl | parseRepoUrl | pick('organization') }}
        project: ${{ parameters.repoUrl | parseRepoUrl | pick('project') }}
        repo: ${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
    # Start a GitHub Action to build an GKE cluster with Crossplane
    - id: github-action
      name: Trigger GitHub Action
      action: github:actions:dispatch
      input:
        workflowId: deploy_aks_with_argocd.yaml
        repoUrl: 'github.com?owner=nashtech-garage&repo=how-to-devops'
        branchOrTagName: 'main'
        workflowInputs:
          clusterName: ${{ parameters.clusterName }}
          region: ${{ parameters.region }}
          resourceGroupName: ${{ parameters.resourceGroupName }}
          kubernetesVersion: ${{ parameters.kubernetesVersion}}
          dnsPrefix: ${{ parameters.dnsPrefix }}          
          repoURLforArgo: ${{ steps['publish'].output.remoteUrl }} 
          host: ${{ parameters.repoUrl | parseRepoUrl | pick('host') }}

     # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
  output:
    links:
      - title: A new repository created
        url: ${{ steps['publish'].output.remoteUrl }}