parameters:
  - name: source
    type: string
  - name: scanFrontend
    type: boolean
    default: false
  - name: scanCodeBackend
    type: boolean
    default: false
  - name: scanImageBackend
    type: boolean
    default: false
  - name: serviceConnectionEndpoint
    type: string
jobs:
  - job: snykScanFrontend
    displayName: Snyk Scan (Frontend)
    {% raw %}condition: eq('${{ parameters.enabled }}', true){% endraw %}
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      {% raw %}- checkout: ${{ parameters.source }}{% endraw %}
      - task: SnykSecurityScan@1
        inputs:
          {% raw %}serviceConnectionEndpoint: ${{ parameters.serviceConnectionEndpoint }}{% endraw %}
          testType: 'code'
          {%- if values.parameters.snykFrontendConfig.testType == 'app' %}
          targetFile: $(targetFile)
          monitorWhen: $(monitorWhen)
          {%- endif %}
          {%- if values.parameters.snykFrontendConfig.testType == 'container' %}
          dockerImageName: $(dockerImageName)
          dockerfilePath: $(dockerfilePath)
          monitorWhen: $(monitorWhen)
          {%- endif %}
          failOnIssues: $(failOnIssues)
          projectName: $(projectName)
          organization: $(organization)
          additionalArguments: $(additionalArguments)

  - job: snykScanBacked
    displayName: Snyk Scan (Backend)
    {% raw %}condition: eq('${{ parameters.enabled }}', true){% endraw %}
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      {% raw %}- checkout: ${{ parameters.source }}{% endraw %}
      {%- if values.parameters.snyKDotnetConfig.configMode == 'manual' %}
        - task: SnykSecurityScan@1
          inputs:
            serviceConnectionEndpoint: $(serviceConnectionEndpoint)
            testType: $(testType)
            dockerImageName: $(dockerImageName)
            monitorWhen: $(monitorWhen)
            failOnIssues: $(failOnIssues)
            projectName: $(projectName)
            organization: $(organization)
      {%- endif %}
