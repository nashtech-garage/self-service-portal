apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: react-app
  title: Creates and initializes a new React SPA
  description: This template will generate a Single Page App and deploy it on a Cluster. This application consists of three parts - Frontend, Backend, and Database.
  tags: 
    - application
spec:
  owner: user:le.caothihoang
  type: application
  parameters:
    - title: Choose A Repository Location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository location for your new  React application
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            requestUserCredentials:
              secretsKey: USER_OAUTH_TOKEN
              additionalScopes:
                github:
                - repo  # Allows creating repositories
                - workflow  # Allows managing GitHub Actions
                azure:
                - email
                - openid
            allowedHosts:
              - github.com
              - dev.azure.com

    # - title: Pipeline Configuration
    #   required:
    #     - branchName
    #     - project
    #     - folder
    #     - pipelineRepositoryName
    #     - pipelineName
    #   properties:
    #     project:
    #       type: string
    #       title: Project
    #       description: Azure DevOps project name
    #     folder:
    #       type: string
    #       title: Folder
    #       description: Pipeline folder path
    #     pipelineName:
    #       type: string
    #       title: Pipeline Name
    #       description: Name for the new pipeline
    #     pipelineRepositoryName:
    #       type: string
    #       title: Repository Name
    #       description: Name of the repository
    #     branchName:
    #       type: string
    #       title: Branch Name
    #       description: The name of the branch to be used for the pipeline
    #   uiSchema:
    #     project:
    #       "ui:autofocus": true
    #       "ui:placeholder": "Enter project name"
    #     folder:
    #       "ui:placeholder": "Enter folder path"
    #     PipelineName:
    #       "ui:placeholder": "Enter pipeline name"
    #     RepositoryName:
    #       "ui:placeholder": "Enter repository name"
    #     branchName:
    #       "ui:placeholder": "Enter branch name"
    
    
    # - title: Basic React Configuration
    #   required:
    #     - appName
    #     - backendName
    #     - backendImageName
    #     - frontendName
    #     - frontendImageName
    #   properties:
    #     appName:
    #       title: Application Name
    #       type: string
    #       description: The name of the msa react application
    #       ui:autofocus: true
    #     backendName:
    #       title: Backend Name
    #       type: string
    #       description: The name of the backend service
    #       ui:autofocus: true
        # backendImageName:
        #   title: Backend Container Image Name
        #   type: string
        #   description: The name of your backend container image
        # frontendName:
        #   title: Frontend Name
        #   type: string
        #   description: The name of the frontend service
        #   ui:autofocus: true
        # frontendImageName:
        #   title: Fronent Container Image Name
        #   type: string
        #   description: The name of your frontent container image
    
    # - title: Choose UserName of Docker Hub
    #   required:
    #     - dockerHubUserName
    #   properties:
    #     dockerHubUserName:
    #       title: Username of Docker Hub
    #       type: string
    #       description: Username of Docker Hub
    #       ui:autofocus: true
    # - title: Scan
    #   properties:
    #     Tools:
    #       type: object
    #       title: Tools
    #       properties:
    #         checkboxFieldSnyk:
    #           title: Snyk
    #           type: boolean
    #         checkboxFieldSonar:
    #           title: Sonar
    #           type: boolean
    #         checkboxFieldTrivy:
    #           title: Trivy
    #           type: boolean

    # - title: Select scan tools
    #   properties:
    #     useSnyk:
    #       type: boolean
    #       title: Run Snyk
    #       default: false
    #     useSonar:
    #       type: boolean
    #       title: Run Sonar
    #       default: false
    #     useTrivy:
    #       type: boolean
    #       title: Run Trivy
    #       default: false
    - title: Scan Tool Setup
      type: object
      properties:
        useSnyk:
          type: boolean
          title: Run Snyk
          default: false
        snykProjectId:
          type: string
          title: Snyk Project ID
          description: Only required if Snyk is selected
          ui:options:
            visibleIf:
              useSnyk: true

        useSonar:
          type: boolean
          title: Run SonarQube
          default: false
        sonarToken:
          type: string
          title: SonarQube Token
          description: Only required if SonarQube is selected
          ui:options:
            visibleIf:
              useSonar: true

        useTrivy:
          type: boolean
          title: Run Trivy
          default: false
        trivyTarget:
          type: string
          title: Trivy Target Path
          description: Only required if Trivy is selected
          ui:options:
            visibleIf:
              useTrivy: true

    - title: Fill in some steps
      properties:
        name:
          title: Select environments
          type: array
          items:
            type: string
            enum:
              - production
              - staging
              - development
          uniqueItems: true
          ui:widget: checkboxes

    
  steps:
    - id: get-secret
      name: Validate Token
      action: custom:get-secret
      input:
        secretKey: AZURE_PAT
    - id: log-token
      name: Debug Token
      action: debug:log
      input:
        message: "Token being used: ${{ secrets.AZURE_PAT }}"

    
    - id: fetch-base
      name: Fetch template for Github repository
      if: ${{ parameters.repoUrl | parseRepoUrl | pick('host') === "github.com" }}
      action: fetch:template
      input:
        url: 'https://github.com/nashtech-garage/scaffold-msa-react'
        targetPath: .
        values:
          appName: ${{ parameters.appName }}
          backendName: ${{ parameters.backendName }}
          backendImageName: ${{ parameters.backendImageName }}                 
          frontendName: ${{ parameters.frontendName }}
          frontendImageName: ${{ parameters.frontendImageName }}       
          dockerHubUserName: ${{ parameters.dockerHubUserName }}    
          repoURL: https://${{ parameters.repoUrl | parseRepoUrl | pick('host') }}/${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}

    - id: fetch-base
      name: Fetch template for Azure DevOps repository
      if: ${{ parameters.repoUrl | parseRepoUrl | pick('host') === "dev.azure.com" }}
      action: fetch:template
      input:
        url: ./content/scan
        values:
          appName: ${{ parameters.appName }}
          backendName: ${{ parameters.backendName }}
          backendImageName: ${{ parameters.backendImageName }}                 
          frontendName: ${{ parameters.frontendName }}
          frontendImageName: ${{ parameters.frontendImageName }}       
          dockerHubUserName: ${{ parameters.dockerHubUserName }}    
          repoURL: https://${{ parameters.repoUrl | parseRepoUrl | pick('organization') }}@dev.azure.com/${{ parameters.repoUrl | parseRepoUrl | pick('organization') }}/${{ parameters.repoUrl | parseRepoUrl | pick('project') }}/_git/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
          
  
    # This step publishes the contents of the working directory to GitHub.
    # - id: publish
    #   name: Publish to Github
    #   if: ${{ parameters.repoUrl | parseRepoUrl | pick('host') === "github.com" }}
    #   action: publish:github
    #   input:
    #     allowedHosts: ['github.com']
    #     description: This is msa reactjs ${{ parameters.appName }} app
    #     repoUrl: ${{ parameters.repoUrl }}
    #     token: ${{ secrets.USER_OAUTH_TOKEN }}


    # This step publishes to Azure DevOps
    # - id: publish
    #   name: Publish to Azure DevOps
    #   if: ${{ parameters.repoUrl | parseRepoUrl | pick('host') === "dev.azure.com" }}
    #   action: publish:azure
    #   input:
    #     allowedHosts: ['dev.azure.com']
    #     description: This is ${{ parameters.clusterName }}
    #     repoUrl: ${{ parameters.repoUrl }}
    #     organization: ${{ parameters.repoUrl | parseRepoUrl | pick('organization') }}
    #     project: ${{ parameters.repoUrl | parseRepoUrl | pick('project') }}
    #     repo: ${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
    #     token: 1oIgeeDfHGcpV5Iw2lnqGxbeEepxoOD7ooHbxKl3HJ6CzzmzeQuOJQQJ99BEACAAAAAAAAAAAAASAZDO33Tf
    #     filePath: scan/scan.yaml
    
    - id: publish
      name: Publish to Azure DevOps
      if: ${{ parameters.repoUrl | parseRepoUrl | pick('host') === "dev.azure.com" }}
      action: publish:azure
      input:
        allowedHosts: ['dev.azure.com']
        description: This is ${{ parameters.clusterName }}
        repoUrl: ${{ parameters.repoUrl }}
        organization: ${{ parameters.repoUrl | parseRepoUrl | pick('organization') }}
        project: ${{ parameters.repoUrl | parseRepoUrl | pick('project') }}
        repo: ${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
        # token: ${{ steps.get-secret.output.value }}
        token: 1nEwHaOjLYkT0GOohAKnf4orlRpynEwiJIuNp9kRmgdu9NSbiFL2JQQJ99BEACAAAAAAAAAAAAASAZDO205E
    - id: getRepoId
      name: Get repository ID
      action: azure:get-repo-id
      input:
        organization: ${{ parameters.repoUrl | parseRepoUrl | pick('organization') }}
        project: ${{ parameters.repoUrl | parseRepoUrl | pick('project') }}
        repositoryName: ${{ parameters.scanRepositoryName }}
        
    - id: createPipeline
      name: Create Azure Pipeline
      action: azure:pipeline:create
      input:
        organization: ${{ parameters.repoUrl | parseRepoUrl | pick('organization') }}
        project: ${{ parameters.repoUrl | parseRepoUrl | pick('project') }}
        folder: ${{ parameters.folder }}
        name: ${{ parameters.scanPipelineName }}
        repositoryId: ${{ steps.getRepoId.output.repositoryId }}
        repositoryName: ${{ parameters.scanRepositoryName }}
        branchName: ${{ parameters.branchName }}
        token: ${{ secrets.USER_OAUTH_TOKEN }}
