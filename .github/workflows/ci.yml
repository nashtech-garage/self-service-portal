name: CI
on:
  # NOTE: If you change these you must update ci-noop.yml as well
  pull_request:
    paths-ignore:
      - 'microsite/**'
      - 'beps/**'
  push:
    # paths:
    #   - 'nashtech-accelerator/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 20.x
  PYTHON_VERSION: 3.12

jobs:
  # This step only runs yarn install to make sure that an exact match is available
  # in the cache. The two following verify and tests jobs then always install from cache.
  install:
    runs-on: ubuntu-latest
    # runs-on: arc-runner-set
    # container: node:20
    
    name: Install package
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # v4

      - name: Check package.json changes
        id: package-json-change
        uses: tj-actions/changed-files@v46
        with:
          files: package.json

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        if: steps.package-json-change.outputs.any_changed == 'true'
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        if: steps.package-json-change.outputs.any_changed == 'true'
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # - name: Install build-essential
      #   run: apt update && apt install -y build-essential
      
      - name: Install modules
        run: yarn install --frozen-lockfile
        if: steps.package-json-change.outputs.any_changed == 'true'

      # - uses: actions/cache@v4
      #   id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #   with:
      #     path: ${GITHUB_WORKSPACE}/node_modules
      #     key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      #     restore-keys: |
      #       ${{ hashFiles('yarn.lock') }}

  # The verify jobs runs all the verification that doesn't require a
  # diff towards master, since it takes some time to fetch that.
  lint:
    runs-on: ubuntu-latest
    # runs-on: arc-runner-set
    # container: node:20
    needs: install

    name: Verify package
    steps:
      - uses: actions/checkout@v4 # v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install modules
        run: yarn install --frozen-lockfile

      # - uses: actions/cache@v4
      #   id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #   with:
      #     path: ${GITHUB_WORKSPACE}/node_modules
      #     key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      #     restore-keys: |
      #       ${{ hashFiles('yarn.lock') }}

      - name: check for missing repo fixes
        run: yarn fix --check

      - name: validate config
        run: yarn backstage-cli config:check --lax

      # - name: type checking and declarations
      #   run: yarn tsc:full

      # - name: prettier
      #   run: yarn prettier:check

        # We need to generate the API references as well, so that we can verify the doc links
      # - name: check api reports and generate API reference
      #   run: yarn build:api-reports:only --ci --docs

      # - name: verify catalog-info.yaml consistency
      #   run: yarn backstage-repo-tools generate-catalog-info --ci

      # - name: lint openapi yaml files
      #   run: yarn backstage-repo-tools repo schema openapi lint

      # - name: verify openapi yaml file matches generated ts file
      #   run: yarn backstage-repo-tools repo schema openapi verify

  build:
    runs-on: ubuntu-latest
    # runs-on: arc-runner-set
    # container: node:20
    needs:
      - install
      - lint
    name: Build Backstage
    steps:
      - uses: actions/checkout@v4 # v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install modules
        run: yarn install --frozen-lockfile

      # - uses: actions/cache@v4
      #   id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #   with:
      #     path: ${GITHUB_WORKSPACE}/node_modules
      #     key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      #     restore-keys: |
      #       ${{ hashFiles('yarn.lock') }}

      - name: typescript compiler
        run: yarn tsc || true
      
      - name: build all packages
        run: yarn build:all

      - name: ensure clean working directory
        run: |
          if files=$(git ls-files --exclude-standard --others --modified) && [[ -z "$files" ]]; then
            exit 0
          else
            echo ""
            echo "Working directory has been modified:"
            echo ""
            git status --short
            echo ""
            exit 1
          fi

      - name: Upload package/app build artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-app-dist
          path: packages/app/dist
          retention-days: 1

      - name: Upload package/backend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-backend-dist
          path: packages/backend/dist
          retention-days: 1

  # The test job runs all tests as well as any verification step that
  # requires a diff towards master.
  test:
    runs-on: ubuntu-latest
    if: false
    # runs-on: arc-runner-set
    # container: node:20
    needs: 
      - build
    name: Test build
    services:
      postgres16:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432/tcp
      postgres12:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432/tcp
      mysql8:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306/tcp
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379/tcp

    env:
      CI: true
      INTEGRATION_TEST_GITHUB_TOKEN: ${{ secrets.INTEGRATION_TEST_GITHUB_TOKEN }}
      INTEGRATION_TEST_GITLAB_TOKEN: ${{ secrets.INTEGRATION_TEST_GITLAB_TOKEN }}
      INTEGRATION_TEST_BITBUCKET_TOKEN: ${{ secrets.INTEGRATION_TEST_BITBUCKET_TOKEN }}
      INTEGRATION_TEST_AZURE_TOKEN: ${{ secrets.INTEGRATION_TEST_AZURE_TOKEN }}

    steps:
      - uses: actions/checkout@v4 # v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install modules
        run: yarn install --frozen-lockfile

      - name: Download package/app build artifact
        uses: actions/download-artifact@v4
        with:
          name: package-app-dist
          path: packages/app/dist

      - name: Download package/backend build artifact
        uses: actions/download-artifact@v4
        with:
          name: package-backend-dist
          path: packages/backend/dist

      - name: Check folders
        run: ls -l packages/app/dist && ls -l packages/backend/dist

      # - uses: actions/cache@v4
      #   id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #   with:
      #     path: ${GITHUB_WORKSPACE}/node_modules
      #     key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      #     restore-keys: |
      #       ${{ hashFiles('yarn.lock') }}
      # This check is done here since it needs git history
      # - name: verify release
      #   run: node scripts/verify-release.js

      # - name: lint changed packages
      #   run: yarn lint

      - name: test changed packages
        run: yarn test --maxWorkers=3 --workerIdleMemoryLimit=1300M --since origin/main
        # env:
        #   BACKSTAGE_TEST_DISABLE_DOCKER: 1
        #   BACKSTAGE_TEST_DATABASE_POSTGRES16_CONNECTION_STRING: postgresql://postgres:postgres@localhost:${{ job.services.postgres16.ports[5432] }}
        #   BACKSTAGE_TEST_DATABASE_POSTGRES12_CONNECTION_STRING: postgresql://postgres:postgres@localhost:${{ job.services.postgres12.ports[5432] }}
        #   BACKSTAGE_TEST_DATABASE_MYSQL8_CONNECTION_STRING: mysql://root:root@localhost:${{ job.services.mysql8.ports[3306] }}/ignored
        #   BACKSTAGE_TEST_CACHE_REDIS7_CONNECTION_STRING: redis://localhost:${{ job.services.redis.ports[6379] }}

      # We run the test cases before verifying the specs to prevent any failing tests from causing errors.
      # - name: verify openapi specs against test cases
      #   run: yarn backstage-repo-tools repo schema openapi test

      - name: ensure clean working directory
        run: |
          if files=$(git ls-files --exclude-standard --others --modified) && [[ -z "$files" ]]; then
            exit 0
          else
            echo ""
            echo "Working directory has been modified:"
            echo ""
            git status --short
            echo ""
            exit 1
          fi
  docker_build:
    runs-on: ubuntu-latest
    needs:
      - build
    name: Build Docker image
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Download package/backend build artifact
        uses: actions/download-artifact@v4
        with:
          name: package-backend-dist
          path: packages/backend/dist
      - name: Login ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: packages/backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}