app:
  title: Self Service Portal
  baseUrl: ${APP_BASE_URL}

organization:
  name: NashTech Vietnam

permission:
  enabled: false
  rbac:
    policies-csv-file: packages/backend/org/rbac-policy.csv
    conditionalPoliciesFile: packages/backend/org/conditional-policies.yaml
    policyFileReload: true

backend:
  baseUrl: ${APP_BASE_URL}
  listen:
    port: 7007
    host: 0.0.0.0
  csp:
    connect-src: ["'self'", 'http:', 'https:']
  cors:
    origin: ${APP_BASE_URL}
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true

  database:
    client: pg
    connection:
      host: ${DB_HOST}
      port: ${DB_PORT}
      user: ${DB_USER}
      password: ${DB_PASSWORD}
      database: ${DB_DATABASE}

  knexConfig:
    pool:
      min: 3
      max: 12
      acquireTimeoutMillis: 60000
      idleTimeoutMillis: 60000

proxy:
  endpoints:
    '/argocd/api':
      target: ${ARGOCD_URL}
      changeOrigin: true
      secure: false
      headers:
        Cookie: ${ARGOCD_AUTH_TOKEN}

    '/grafana/api':
      target: ${GRAFANA_URL}
      headers:
        Authorization: Bearer ${GRAFANA_TOKEN}

    '/prometheus/api':
      target: ${PROMETHEUS_URL}
      credentials: dangerously-allow-unauthenticated
      headers:
        Authorization: Basic ${PROMETHEUS_TOKEN}

    '/newrelic/api':
      target: ${NEW_RELIC_URL}
      headers:
        X-Api-Key: ${NEW_RELIC_USER_KEY}

grafana:
  domain: ${GRAFANA_URL}
  unifiedAlerting: true

techdocs:
  builder: 'local'
  generator:
    runIn: 'docker'
  publisher:
    type: 'local'

auth:
  providers:
    microsoft:
      development:
        clientId: ${AZURE_CLIENT_ID}
        clientSecret: ${AZURE_CLIENT_SECRET}
        tenantId: ${AZURE_TENANT_ID}
    github:
      development:
        clientId: ${GITHUB_CLIENT_ID}
        clientSecret: ${GITHUB_CLIENT_SECRET}
    google:
      development:
        clientId: ${GOOGLE_CLIENT_ID}
        clientSecret: ${GOOGLE_CLIENT_SECRET}
    cognito:
      development:
        clientId: ${COGNITO_CLIENT_ID}
        clientSecret: ${COGNITO_CLIENT_SECRET}
        domain: ${COGNITO_DOMAIN}

catalog:
  migrations:
    skip: true
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, Template]
  locations:
    - type: file
      target: packages/backend/org/org.yaml
      rules:
        - allow: [User, Group]
    - type: file
      target: packages/backend/templates/gke-cluster/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: packages/backend/templates/aks-cluster/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: packages/backend/templates/eks-cluster/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: packages/backend/templates/msa-react-app/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: packages/backend/templates/msa-dotnet-app/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: packages/backend/templates/dev-box/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: packages/backend/system/system.yaml
    - type: file
      target: packages/backend/component/back-stack-component.yaml
      rules:
        - allow: [Component]
    - type: file
      target: packages/backend/component/github-action-component.yaml
      rules:
        - allow: [Component]
    - type: file
      target: packages/backend/component/monitoring-component.yaml
      rules:
        - allow: [Component]

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - name: my-cluster
          url: ${K8S_URL}
          authProvider: 'serviceAccount'
          skipTLSVerify: true
          serviceAccountToken: ${K8S_TOKEN}

sonarqube:
  instances:
    - name: sonarqube
      baseUrl: ${SONARQUBE_URL}
      apiKey: ${SONARQUBE_TOKEN}
      # If you want to use a different auth type, you can change it here
      authType: Bearer
